#
# SSH Key version:
# ansible-playbook playbooks/setup-server-web.yml -i playbooks/inventory.txt --private-key=/mnt/c/Users/wh/SSHKeys/master.pem --user=wh --extra-vars="newwebserver=web.example.com"
#
# SSH Password version:
# ansible-playbook playbooks/setup-server-web.yml -i playbooks/inventory.txt --ask-pass --ask-become-pass --user=wh --extra-vars="newwebserver=web.example.com"
#
# this will leave your root mysql account without a password so use the following to get a new password prompt ONLY IF THERE IS NO PASSWORD:
# $ mysqladmin -u root password
#

---

- hosts: "{{ newwebserver }}"
  become: yes
  gather_facts: no
  vars_prompt:
  - name: "bbuser"
    prompt: "What is your Bitbucket username?"
    private: no
  - name: "bbpass"
    prompt: "What is your Bitbucket password?"
    private: yes
  tasks:
  - include: includes/tasks/setup-server-common.yml

  # edit as you need:
  # - if you are using ubuntu 16.04, you'll need the certbot ppa
  # - if you don't have access to php7.1 and want it, you'll need the ondrej ppa
  - name: add ondrej and certbot PPAs
    shell: apt install -y python-software-properties software-properties-common && add-apt-repository -y ppa:ondrej/php && add-apt-repository -y ppa:certbot/certbot

# to make this work on debian, you need the following commands (https://www.chris-shaw.com/blog/how-to-install-php-7.1-on-debian-8)
# apt install apt-transport-https
# wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
# echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/php.list

  # in this multiple-playbooks-that-install-things setup, you need to apt update again
  - apt:
      update_cache: yes

  - name: install webserver software
    apt:
      pkg: "{{ item }}"
      state: latest
    with_items:
    - certbot
    - nginx
    - php7.1-fpm      # if not CGI
    - php7.1-cli
    - php7.1-curl
    - php7.1-gd
    - php7.1-mcrypt
    - php7.1-mysql
    - php7.1-zip
    - php7.1-xml
    - php7.1-bcmath
    - php7.1-mbstring
    - libxrender1     # wkhtmltopdf
    - fontconfig      # wkhtmltopdf
    - xvfb            # wkhtmltopdf
    - python-mysqldb  # required for ansible to use mysql
    - ghostscript     # required for gs command to generate JPG of PDF

    # don't install a local mysql server if you don't need it (to allow remote connections comment out bind-address wherever it is)
    #- mysql-server

    # try to have better local dev tools instead of installing a client
    #- mysql-client

    # if apache
    #- apache2
    #- libapache2-mod-fastcgi  # to talk to PHP FPM if not on Debian

    # for apache cgi
    #- libapache2-mod-php7.1   # alternative to fastcgi
    #- libapache2-mpm-itk      # simple change of user for security in the absence of PHP FPM

  # wkhtmltopdf on ubuntu 16.04 doesn't work with a newer libssl dev
  # (libssl-dev may not be installed at all but if you get stuck refer to https://github.com/wkhtmltopdf/wkhtmltopdf/issues/3001)
  - name: force downgrade of libssl-dev for wkhtmltopdf 12.4
    shell: |
      apt install libssl-dev=1.0.2g-1ubuntu4.9;
      apt-mark hold libssl-dev;

  # cd /usr/local/bin && wget ... && tar -xf ... && rm ...
  - name: download and extract wkhtmltopdf
    unarchive:
      src: https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz
      dest: /usr/local/bin
      remote_src: yes

  - name: expose the wkhtmltox binaries
    shell: |
      rsync -rvt /usr/local/bin/wkhtmltox/bin/* /usr/local/bin/;
      rm -rf /usr/local/bin/wkhtmltox;

## PDF notes
# you may need arial too
# add contrib onto main two lines in sources.list
# apt-get update && apt-get install msttcorefonts

  # composer doesn't currently have a latest stable version link so you have to check yourself at https://getcomposer.org/download/
  - name: install composer globally
    get_url:
      url: https://getcomposer.org/download/1.5.2/composer.phar
      dest: /usr/local/bin/composer
      mode: 0755

  # if apache
  #- name: activate required apache2 modules
  #  shell: a2enmod actions expires headers rewrite ssl
  # if on Debian and Apache2.4 you'll need mod_proxy (and mod_proxy_fcgi) but you won't be running an open proxy by default
  # status is enabled by default, maybe add it to a specific domain if you want to use it
  # notes on apache authorization http://www.the-art-of-web.com/system/apache-authorization/

  #- name: install Apache SSL
  #  file:
  #    state: link
  #    src: /organisation/git/config/apache/ssl
  #    dest: /etc/apache2/mods-enabled/organisation-ssl.conf

  #- name: install Apache deflate
  #  file:
  #    state: link
  #    src: /organisation/git/config/apache/deflate
  #    dest: /etc/apache2/mods-enabled/organisation-deflate.conf

  #- name: install Apache expires
  #  file:
  #    state: link
  #    src: /organisation/git/config/apache/expires
  #    dest: /etc/apache2/mods-enabled/organisation-expires.conf

  #- name: restart apache2 for updated settings
  #  shell: apachectl -k graceful

  - name: install nginx additional settings
    file:
      state: link
      src: /organisation/git/config/nginx/serversettings
      dest: /etc/nginx/conf.d/organisationdefaults.conf

# update default nginx vhost
# disable /usr/share/nginx/html/index.html
# disable /var/www/html/index.nginx-debian.html

  - name: install PHP defaults
    file:
      state: link
      src: /organisation/git/config/fpm/phpdefaults
      dest: /etc/php/7.1/fpm/conf.d/99-organisationdefaults.ini

  - name: install additional logrotate config files
    file:
      state: link
      src: "/organisation/git/config/logrotate/{{ item }}"
      dest: "/etc/logrotate.d/{{ item }}-organisation"
    with_items:
    #- apache    # if apache
    - fpm
    - nginx

# manually generate certificate for web.example.com and rsync letsencrypt directory locally
# change /etc/cron.d/certbot to something like (delete choice of webserver as required):
# 0 */12 * * * root perl -e 'sleep int(rand(3600))' && certbot -q renew && rsync -rqtl /etc/letsencrypt /organisation/local/ && /usr/sbin/nginx -s reload && apachectl -k graceful

  handlers:
  - include: includes/handlers/webmin-restart.yml # required from common include

# these take forever to generate so save them for later
#    mkdir -p /etc/nginx/ssl
#    touch /etc/nginx/ssl/dhparam.pem
#    openssl dhparam -out /etc/nginx/ssl/dhparam.pem 4096 &>/dev/null
